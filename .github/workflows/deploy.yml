name: Deploy to AWS EC2

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
    types: [ closed ]

jobs:
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    
    # Only run on merged pull requests or direct pushes to master/main
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-js-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          saarthi-backend/package-lock.json
          saarthi-webapp/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd saarthi-backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd saarthi-webapp
        npm ci
        
    - name: Build frontend
      run: |
        cd saarthi-webapp
        npm run build
        
    - name: Run tests (if available)
      run: |
        cd saarthi-backend
        npm test --if-present
        cd ../saarthi-webapp
        npm test --if-present
        
    - name: Create deployment archive
      run: |
        # Create a deployment directory
        mkdir -p deployment
        
        # Copy backend files
        cp -r saarthi-backend deployment/
        
        # Copy frontend build
        cp -r saarthi-webapp deployment/
        
        # Copy deployment scripts
        cp deploy.sh deployment/
        cp docker-compose.yml deployment/
        cp ecosystem.config.js deployment/
        cp run.sh deployment/
        
        # Create archive
        tar -czf deployment.tar.gz deployment/
        
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.AWS_PORT || 22 }}
        script: |
          # Set deployment variables
          DEPLOY_PATH="/home/${{ secrets.AWS_USERNAME }}/saarthi"
          BACKUP_PATH="/home/${{ secrets.AWS_USERNAME }}/saarthi-backup-$(date +%Y%m%d-%H%M%S)"
          
          # Create backup of current deployment
          if [ -d "$DEPLOY_PATH" ]; then
            echo "Creating backup of current deployment..."
            cp -r "$DEPLOY_PATH" "$BACKUP_PATH"
          fi
          
          # Stop running services
          echo "Stopping running services..."
          cd "$DEPLOY_PATH" 2>/dev/null && ./run.sh stop || echo "No running services to stop"
          
          # Remove old deployment
          rm -rf "$DEPLOY_PATH"
          
          # Create deployment directory
          mkdir -p "$DEPLOY_PATH"
          
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.AWS_PORT || 22 }}
        source: "deployment.tar.gz"
        target: "/home/${{ secrets.AWS_USERNAME }}/"
        
    - name: Extract and start services
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.AWS_PORT || 22 }}
        script: |
          DEPLOY_PATH="/home/${{ secrets.AWS_USERNAME }}/saarthi"
          
          # Extract deployment
          echo "Extracting deployment files..."
          cd "/home/${{ secrets.AWS_USERNAME }}/"
          tar -xzf deployment.tar.gz
          mv deployment/* "$DEPLOY_PATH/"
          rmdir deployment
          rm deployment.tar.gz
          
          # Set up environment
          cd "$DEPLOY_PATH"
          
          # Copy environment file if it exists
          if [ -f "/home/${{ secrets.AWS_USERNAME }}/.env.production" ]; then
            echo "Copying production environment file..."
            cp "/home/${{ secrets.AWS_USERNAME }}/.env.production" saarthi-backend/.env
          else
            echo "Warning: No production environment file found at ~/.env.production"
          fi
          
          # Make scripts executable
          chmod +x *.sh
          chmod +x saarthi-backend/*.sh 2>/dev/null || true
          
          # Install/update dependencies
          echo "Installing backend dependencies..."
          cd saarthi-backend
          npm ci --production
          
          echo "Installing frontend dependencies..."
          cd ../saarthi-webapp
          npm ci --production
          
          # Start services
          echo "Starting services..."
          cd "$DEPLOY_PATH"
          ./run.sh &
          
          # Wait a moment and check if services started
          sleep 10
          
          # Check if services are running
          if pgrep -f "node.*server.js" > /dev/null; then
            echo "✅ Backend service started successfully"
          else
            echo "❌ Backend service failed to start"
            exit 1
          fi
          
          if pgrep -f "next.*start" > /dev/null || pgrep -f "npm.*start" > /dev/null; then
            echo "✅ Frontend service started successfully"
          else
            echo "⚠️  Frontend service status unclear, check manually"
          fi
          
          echo "🚀 Deployment completed successfully!"
          
    - name: Notify deployment status
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        port: ${{ secrets.AWS_PORT || 22 }}
        script: |
          echo "=== Deployment Status ==="
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "========================="
          
          # Check running processes
          echo "Running Node processes:"
          pgrep -af node || echo "No Node processes found"
          
          # Check port usage
          echo "Port usage:"
          netstat -tlnp 2>/dev/null | grep -E ':(3000|5000|8000)' || echo "No services on common ports"
          
          # Show recent logs if available
          echo "Recent application logs (last 10 lines):"
          tail -10 /home/${{ secrets.AWS_USERNAME }}/saarthi/logs/*.log 2>/dev/null || echo "No log files found"
